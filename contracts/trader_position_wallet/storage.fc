global slice ctx::vamm_addr;                                         ;; VAMM address
global slice ctx::router_addr;                                       ;; Router address
global int ctx::is_busy;                                             ;; Flag indicating whether position is processing by amm or not
global cell ctx::position_ref;                                        ;; Trader position content

;; global slice trader_addr;                              ;; Trader address
;; global int size;                                       ;; Trader position size (base asset)
;; global int margin;                                     ;; Trader position margin (quote asset) - how much quote asset is supporting the position
;; global int open_notional;                              ;; Trader position open notional - how much quote asset they have borrowed
;; global int last_updated_cumulative_premium_fraction;   ;; Trader position last updated cumulative premium fraction
;; global int fee;                                        ;; Fee for current position
;; global int last_updated_timestamp;                     ;; Trader position last updated timestamp

() load_data() impure inline {
  slice ds = get_data().begin_parse();

  ctx::vamm_addr = ds~load_msg_addr();
  ctx::router_addr = ds~load_msg_addr();
  ctx::is_busy = ds~load_uint(1);
  ctx::position_ref = ds.preload_ref();
}

_ load_raw_data() impure inline {
  slice ds = get_data().begin_parse();

  return (
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_uint(1),
    ds.preload_ref()
  );
}

() save_data() impure inline {
  set_data(
    begin_cell()
      .store_slice(ctx::vamm_addr)
      .store_slice(ctx::router_addr)
      .store_uint(ctx::is_busy, 1)
      .store_ref(ctx::position_ref)
      .end_cell()
  );
}