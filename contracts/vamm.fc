#pragma version >=0.4.1;

#include "shared/stdlib.fc";
#include "shared/jetton-utils.fc";
;; #include "shared/op-codes.fc";
#include "shared/messages.fc";

#include "vamm/op-codes.fc";
#include "vamm/constants.fc";
#include "vamm/storage.fc";
#include "vamm/errors.fc";
#include "vamm/utils.fc";
#include "vamm/handlers.fc";

#include "trader_position_wallet/packers.fc";
;; #include "oracle/op-codes.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    throw_if(0, cs~load_uint(4) & 1); ;; ignore all bounced messages

    slice sender_addr = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::temp_set_price) {
        load_data();

        int new_price = in_msg_body~load_uint(128);
        var (
            int newQuoteAssetWeight
        ) = getSyncTerminalPrice(new_price, db::quoteAssetReserve, db::baseAssetReserve);

        db::quoteAssetWeight = newQuoteAssetWeight;
        db::oraclePrice = new_price;
        
        save_data();
        return ();
    }

    if (op == op::temp_set_amm_data) {
        load_data();
        var (db::balance, db::oraclePrice, db::quoteAssetReserve, db::baseAssetReserve) = (in_msg_body~load_coins(), in_msg_body~load_uint(128), in_msg_body~load_uint(128), in_msg_body~load_uint(128));
        save_data();
        return ();
    }

    if (op == op::increase_position) {
        handle::increase_position(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::add_margin) {
        handle::add_margin(in_msg_body, sender_addr, query_id);
        return ();
    }
    
    if (op == op::close_position) {
        handle::close_position(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }


    if (op == op::remove_margin) {
        handle::remove_margin(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::pay_funding) {
        handle::pay_funding(in_msg_body, sender_addr, query_id);
        return ();
    }

    throw(0xffff);
}

_ get_amm_data() method_id {
    var (int balance, int oraclePrice, slice router_addr, cell exchange_settings, cell amm_state, cell funding_state, _) = load_raw_data();
    return (balance, oraclePrice, router_addr, exchange_settings, amm_state, funding_state);
}
