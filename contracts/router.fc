#pragma version >=0.4.1;

#include "shared/stdlib.fc";
#include "shared/messages.fc";
#include "shared/jetton-op-codes.fc";

#include "vamm/op-codes.fc";

#include "router/storage.fc";
#include "router/errors.fc";
#include "router/op-codes.fc";
#include "router/utils.fc";
#include "router/handlers.fc";


;; TODO: refactor to handlers/calls for every OP
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    throw_if(0, cs~load_uint(4) & 1); ;; ignore all bounced messages

    slice sender_addr = cs~load_msg_addr();
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; TODO: use later to calculate fees for all chain calls 

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification) {
        handle::transfer_notification(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::withdraw) {
        handle::withdraw(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::close_position) {
        handle::close_position(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::remove_margin) {
        handle::remove_margin(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::pay_funding) {
        handle::pay_funding(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::temp_set_amm_data) {
        load_data();
        throw_unless(error::not_an_admin, equal_slices(sender_addr, ctx::admin_address));

        var (cell state_init, slice vamm_addr) = get_vamm_state_init_and_address();
        var body = begin_cell()
            .store_uint(op::temp_set_amm_data, 32)
            .store_uint(query_id, 64)
            .store_slice(in_msg_body)
            .end_cell();

        send_message_with_stateinit(0 , vamm_addr, state_init, body, mode::carry_remaining_gas);
        return ();
    }

    if (op == op::temp_set_whitelisted_address) {
        load_data();
        throw_unless(error::not_an_admin, equal_slices(sender_addr, ctx::admin_address));
        ctx::whitelisted_jetton_wallet_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    throw(0xffff);
}

_ get_router_data() method_id {
    return load_raw_data();
}

;; TODO: index -> amm
slice get_amm_address() method_id {
    load_data();
    var (_, slice vamm_addr) = get_vamm_state_init_and_address();
    return vamm_addr;
}

;; TODO: (index, trader) -> amm
slice get_trader_position_address(slice trader_addr) method_id {
    load_data();
    var (_, slice vamm_addr) = get_vamm_state_init_and_address();
    var (_, slice trader_position_addr) = get_position_state_init_and_address(vamm_addr, trader_addr);
    return trader_position_addr;
}
