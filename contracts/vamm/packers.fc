_ unpack_exchange_settings(slice ds) inline {
  return (
    ds~load_uint(32), ;; db::fee;                                      
    ds~load_uint(32), ;; db::rolloverFee;                              
    ds~load_uint(32), ;; db::fundingPeriod;                            
    ds~load_uint(32), ;; db::initMarginRatio;                          
    ds~load_uint(32), ;; db::maintenanceMarginRatio;                   
    ds~load_uint(32), ;; db::liquidationFeeRatio;                      
    ds~load_uint(32), ;; db::partialLiquidationRatio;                  
    ds~load_uint(32), ;; db::spreadLimit;                              
    ds~load_uint(32), ;; db::maxPriceImpact;                           
    ds~load_uint(32), ;; db::maxPriceSpread;                           
    ds~load_uint(128), ;; db::maxOpenNotional;                          
    ds~load_uint(32), ;; db::feeToStakersPercent;                      
    ds~load_uint(32) ;; db::maxOracleDelay;                           
  );
}

cell pack_exchange_settings(
  int fee,
  int rolloverFee,
  int fundingPeriod,
  int initMarginRatio,
  int maintenanceMarginRatio,
  int liquidationFeeRatio,
  int partialLiquidationRatio,
  int spreadLimit,
  int maxPriceImpact,
  int maxPriceSpread,
  int maxOpenNotional,
  int feeToStakersPercent,
  int maxOracleDelay) {
  return begin_cell()
            .store_uint(fee ,32) ;; db::fee;                                      
            .store_uint(rolloverFee ,32) ;; db::rolloverFee;                              
            .store_uint(fundingPeriod ,32) ;; db::fundingPeriod;                            
            .store_uint(initMarginRatio ,32) ;; db::initMarginRatio;                          
            .store_uint(maintenanceMarginRatio ,32) ;; db::maintenanceMarginRatio;                   
            .store_uint(liquidationFeeRatio ,32) ;; db::liquidationFeeRatio;                      
            .store_uint(partialLiquidationRatio ,32) ;; db::partialLiquidationRatio;                  
            .store_uint(spreadLimit ,32) ;; db::spreadLimit;                              
            .store_uint(maxPriceImpact ,32) ;; db::maxPriceImpact;                           
            .store_uint(maxPriceSpread ,32) ;; db::maxPriceSpread;                           
            .store_uint(maxOpenNotional ,128) ;; db::maxOpenNotional;                          
            .store_uint(feeToStakersPercent ,32) ;; db::feeToStakersPercent;                      
            .store_uint(maxOracleDelay ,32) ;; db::maxOracleDelay;                           
            .end_cell();
}

_ unpack_amm_state(slice ds) inline {
  return (
    ds~load_uint(128), ;; quoteAssetReserve
    ds~load_uint(128), ;; baseAssetReserve
    ds~load_uint(32), ;; quoteAssetWeight
    ds~load_uint(128), ;; totalLongPositionSize
    ds~load_uint(128), ;; totalShortPositionSize
    ds~load_uint(128), ;; openInterestLong
    ds~load_uint(128) ;; openInterestShort
  );
}

cell pack_amm_state(
  int quoteAssetReserve,
  int baseAssetReserve,
  int quoteAssetWeight,
  int totalLongPositionSize,
  int totalShortPositionSize,
  int openInterestLong,
  int openInterestShort
) {
  return begin_cell()
          .store_uint(quoteAssetReserve, 128)
          .store_uint(baseAssetReserve, 128)
          .store_uint(quoteAssetWeight, 32)
          .store_int(totalLongPositionSize, 128)
          .store_uint(totalShortPositionSize, 128)
          .store_uint(openInterestLong, 128)
          .store_uint(openInterestShort, 128)
          .end_cell();
}

_ unpack_funding_state(slice ds) inline {
  return (
    ds~load_uint(128), ;; latestLongCumulativePremiumFraction
    ds~load_uint(128), ;; latestShortCumulativePremiumFraction
    ds~load_uint(32),   ;; nextFundingBlockTimestamp
    ds~load_uint(2),   ;; fundingMode
    ds~load_uint(32),   ;; longFundingRate
    ds~load_uint(32)   ;; shortFundingRate
  );
}

cell pack_funding_state(
  int latestLongCumulativePremiumFraction,
  int latestShortCumulativePremiumFraction,
  int nextFundingBlockTimestamp,
  int fundingMode,
  int longFundingRate,
  int shortFundingRate
) {
  return begin_cell()
          .store_uint(latestLongCumulativePremiumFraction, 128)
          .store_uint(latestShortCumulativePremiumFraction, 128)
          .store_uint(nextFundingBlockTimestamp, 32)
          .store_int(fundingMode, 2)
          .store_uint(longFundingRate, 32)
          .store_uint(shortFundingRate, 32)
          .end_cell();
}
